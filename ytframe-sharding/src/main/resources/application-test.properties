###########################################################
#
#                       数据源参数配置-druid
#
###########################################################
initialSize=5
minIdle=5
maxIdle=100
maxActive=20
maxWait=60000
timeBetweenEvictionRunsMillis=60000
minEvictableIdleTimeMillis=300000
###########################################################
#
#                       数据源分片详细配置
#
###########################################################
#打印sql日志
sharding.jdbc.config.sharding.props.sql.show=true
#数据源名称，多数据源以逗号分隔
sharding.jdbc.datasource.names=ds0,ds1
###########################################################
#
#        shardingjdbc--默认分片规则配置--字典表使用
#
###########################################################
#输入加密盐值
#jasypt.encryptor.password=salt
#未配置分片规则的表将通过默认数据源定位-适用于单库单表，该表无需配置分片规则
sharding.jdbc.config.sharding.defaultDataSourceName=ds0
###########################################################
#
#                    shardingjdbc--分片规则--订单表
#           根据user_id取模分库, 且根据order_id取模分表的两库两表的配置。
#
###########################################################
#取模必须为int类型的字段
sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=device_id
sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=ds$->{device_id % 2}

sharding.jdbc.config.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order_0$->{0..1}
sharding.jdbc.config.sharding.tables.t_order.table-strategy.inline.sharding-column=device_id
sharding.jdbc.config.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_0$->{device_id % 2}
#指定分库规则
#sharding.jdbc.config.sharding.tables.append_product_order_info.databaseStrategy.complex.shardingColumns=order_id
#.jdbc.config.sharding.tables.append_product_order_info.databaseStrategy.complex.algorithmClassName=com.gaoyang.marketing.shardingjdbc.util.config.sharding.CommonCSADbRule
#指定分表规则
#sharding.jdbc.config.sharding.tables.append_product_order_info.tableStrategy.complex.shardingColumns=ubi_id,apoi_id
#sharding.jdbc.config.sharding.tables.append_product_order_info.tableStrategy.complex.algorithmClassName=com.gaoyang.marketing.shardingjdbc.util.config.sharding.CommonCSATbRule

###############################################################
#
#                    shardingjdbc--分片规则--复合分片--订单表
#           根据user_id取模分库, 且根据order_id取模分表的两库两表的配置。
#
###############################################################
#订单表多分片键策略配置
sharding.jdbc.config.sharding.tables.t_device.actualDataNodes=ds$->{0..1}.t_device_0$->{0..3}
#指定分库规则
sharding.jdbc.config.sharding.tables.t_device.databaseStrategy.complex.shardingColumns=device_id,company_no
sharding.jdbc.config.sharding.tables.t_device.databaseStrategy.complex.algorithmClassName=com.yintao.ytframe.sharding.config.DbComplexSharding
#指定分表规则
sharding.jdbc.config.sharding.tables.t_device.tableStrategy.complex.shardingColumns=device_id,device_no
sharding.jdbc.config.sharding.tables.t_device.tableStrategy.complex.algorithmClassName=com.yintao.ytframe.sharding.config.TbComplexSharding
###############################################################
#
#                       数据源详细配置
#
###########################################################
#################### 00库配置 ##############################
sharding.jdbc.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.ds0.url=jdbc:mysql://127.0.0.1:3306/ds0?useUnicode=true&characterEncoding=utf8&useSSL=true&serverTimezone=GMT%2B8
sharding.jdbc.datasource.ds0.username=root
# 通过ENC(密文)开启密码解密，不使用加密算法时，直接输入原始密码,密文 ENC(LIGKpRXjX0FD24)
sharding.jdbc.datasource.ds0.password=root
# 连接池的配置信息
# 初始化大小，最小，最大
sharding.jdbc.datasource.ds0.initialSize=${initialSize}
# 只需配置minIdle最小连接池数量，maxIdle已经不再使用，配置了也没效果
sharding.jdbc.datasource.ds0.minIdle=${minIdle}
# 最大连接池数量
sharding.jdbc.datasource.ds0.maxActive=${maxActive}
# 配置获取连接等待超时的时间
sharding.jdbc.datasource.ds0.maxWait=${maxWait}
# 用来检测连接是否有效的sql
sharding.jdbc.datasource.ds0.validationQuery=SELECT 1 FROM DUAL
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
sharding.jdbc.datasource.ds0.timeBetweenEvictionRunsMillis=${timeBetweenEvictionRunsMillis}
# 配置一个连接在池中最小生存的时间，单位是毫秒
sharding.jdbc.datasource.ds0.minEvictableIdleTimeMillis=${minEvictableIdleTimeMillis}
#################### 01库配置 ##############################
sharding.jdbc.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.ds1.url=jdbc:mysql://127.0.0.1:3306/ds1?useUnicode=true&characterEncoding=utf8&useSSL=true&serverTimezone=GMT%2B8
sharding.jdbc.datasource.ds1.username=root
# 通过ENC(密文)开启密码解密，不使用加密算法时，直接输入原始密码 shardingtest
sharding.jdbc.datasource.ds1.password=root
# 连接池的配置信息
# 初始化大小，最小，最大
sharding.jdbc.datasource.ds1.initialSize=${initialSize}
# 只需配置minIdle最小连接池数量，maxIdle已经不再使用，配置了也没效果
sharding.jdbc.datasource.ds1.minIdle=${minIdle}
# 最大连接池数量
sharding.jdbc.datasource.ds1.maxActive=${maxActive}
# 配置获取连接等待超时的时间
sharding.jdbc.datasource.ds1.maxWait=${maxWait}
# 用来检测连接是否有效的sql
sharding.jdbc.datasource.ds1.validationQuery=SELECT 1 FROM DUAL
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
sharding.jdbc.datasource.ds1.timeBetweenEvictionRunsMillis=${timeBetweenEvictionRunsMillis}
# 配置一个连接在池中最小生存的时间，单位是毫秒
sharding.jdbc.datasource.ds1.minEvictableIdleTimeMillis=${minEvictableIdleTimeMillis}

#
##################### 02库配置 ##############################
#sharding.jdbc.datasource.ds2.type=com.alibaba.druid.pool.DruidDataSource
#sharding.jdbc.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver
#sharding.jdbc.datasource.ds2.url=jdbc:mysql://127.0.0.1:3306/marketingdb_02?useUnicode=true&characterEncoding=utf8&useSSL=true&serverTimezone=GMT%2B8
#sharding.jdbc.datasource.ds2.username=root
## 通过ENC(密文)开启密码解密，不使用加密算法时，直接输入原始密码 shardingtest
#sharding.jdbc.datasource.ds2.password=root
## 连接池的配置信息
## 初始化大小，最小，最大
#sharding.jdbc.datasource.ds2.initialSize=${initialSize}
## 只需配置minIdle最小连接池数量，maxIdle已经不再使用，配置了也没效果
#sharding.jdbc.datasource.ds2.minIdle=${minIdle}
## 最大连接池数量
#sharding.jdbc.datasource.ds2.maxActive=${maxActive}
## 配置获取连接等待超时的时间
#sharding.jdbc.datasource.ds2.maxWait=${maxWait}
## 用来检测连接是否有效的sql
#sharding.jdbc.datasource.ds2.validationQuery=SELECT 1 FROM DUAL
## 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#sharding.jdbc.datasource.ds2.timeBetweenEvictionRunsMillis=${timeBetweenEvictionRunsMillis}
## 配置一个连接在池中最小生存的时间，单位是毫秒
#sharding.jdbc.datasource.ds2.minEvictableIdleTimeMillis=${minEvictableIdleTimeMillis}
##################### 03库配置 ##############################
#sharding.jdbc.datasource.ds3.type=com.alibaba.druid.pool.DruidDataSource
#sharding.jdbc.datasource.ds3.driver-class-name=com.mysql.jdbc.Driver
#sharding.jdbc.datasource.ds3.url=jdbc:mysql://127.0.0.1:3306/marketingdb_03?useUnicode=true&characterEncoding=utf8&useSSL=true&serverTimezone=GMT%2B8
#sharding.jdbc.datasource.ds3.username=root
## 通过ENC(密文)开启密码解密，不使用加密算法时，直接输入原始密码 shardingtest
#sharding.jdbc.datasource.ds3.password=root
## 连接池的配置信息
## 初始化大小，最小，最大
#sharding.jdbc.datasource.ds3.initialSize=${initialSize}
## 只需配置minIdle最小连接池数量，maxIdle已经不再使用，配置了也没效果
#sharding.jdbc.datasource.ds3.minIdle=${minIdle}
## 最大连接池数量
#sharding.jdbc.datasource.ds3.maxActive=${maxActive}
## 配置获取连接等待超时的时间
#sharding.jdbc.datasource.ds3.maxWait=${maxWait}
## 用来检测连接是否有效的sql
#sharding.jdbc.datasource.ds3.validationQuery=SELECT 1 FROM DUAL
## 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#sharding.jdbc.datasource.ds3.timeBetweenEvictionRunsMillis=${timeBetweenEvictionRunsMillis}
## 配置一个连接在池中最小生存的时间，单位是毫秒
#sharding.jdbc.datasource.ds3.minEvictableIdleTimeMillis=${minEvictableIdleTimeMillis}